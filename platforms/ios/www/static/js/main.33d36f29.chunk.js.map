{"version":3,"sources":["config.js","speech.js","App.js","serviceWorker.js","index.js"],"names":["config","googleTTSApi","key","speechSynthesis","vi-VN","api","character","male","voice","speed","pitch","female","AudioContextConfig","volume","loop","arguments","length","undefined","playbackRate","Object","classCallCheck","this","GoogleTTS","lang","range","window","AudioContext","webkitAudioContext","audioContext","createOrResumeAudioContext","createClass","value","_start","asyncToGenerator","regenerator_default","a","mark","_callee","text","delay","overrideConfig","_this","_args","wrap","_context","prev","next","abrupt","Promise","resolve","reject","joy","anger","sadness","name","payload","audioConfig","audioEncoding","speakingRate","input","languageCode","ssmlGender","getVoiceGender","axios","create","baseURL","method","params","conf","post","then","data","speak","audioContent","catch","e","console","error","audioData","base64ToArrayBuffer","decodeAudioData","audioBuffer","source","createBufferSource","buffer","loopStart","loopEnd","duration","connect","destination","start","noteOn","stop","noteOff","onended","setTimeout","_x","_x2","apply","base64","binary_string","atob","len","bytes","Uint8Array","i","charCodeAt","status","state","resume","_stop","_callee2","_context2","suspend","MALE","FEMALE","nozomi","sumire","maki","kaho","akari","nanako","reina","seiji","hiroshi","osamu","taichi","koutarou","anzu","yuuto","chihiro","nozomi_emo","maki_emo","reina_emo","taichi_emo","App","handleClick","_config$speechSynthes","react_default","createElement","className","href","onClick","React","Component","Boolean","location","hostname","match","renderReactDom","ReactDOM","render","App_App","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33d36f29.chunk.js","sourcesContent":["export default {\n  googleTTSApi: {\n    key: \"AIzaSyBOP1OTzshLV8LX0mzyAv1y2ZOAT0K-wK4\"\n  },\n  speechSynthesis: {\n    \"vi-VN\": {\n      api: \"GOOGLE_TTS\",\n      character: {\n        male: {\n          voice: \"Google US English\",\n          speed: 1.6,\n          pitch: 1.0,\n        },\n        female: {\n          voice: \"Google US English\",\n          speed: 1.0,\n          pitch: 0.9,\n        },\n      },\n    },\n  }\n}","import conf from \"./config\";\nimport axios from 'axios';\n/**\n * Holds the configurations of AudioContext engine\n * */\nclass AudioContextConfig {\n  constructor(volume, loop = false, playbackRate = 1.0) {\n    this.volume = volume;\n    this.loop = loop;\n    this.playbackRate = playbackRate;\n  }\n}\n\n/**\n * Utilize Google Text-To-Speech API to generate spoken audio\n * */\nexport class GoogleTTS {\n  constructor(lang, voice, speed, pitch, range) {\n    this.lang = lang;\n    this.voice = voice;\n    this.speed = speed;\n    this.pitch = pitch;\n    this.range = range;\n\n    // Play audio files using AudioContext\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.audioContext = null;\n    this.createOrResumeAudioContext();\n  }\n\n  async start(text, delay, volume = 1.0, overrideConfig = {}) {\n    return new Promise((resolve, reject) => {\n      const { joy, anger, sadness, name, speed, pitch, range } = overrideConfig;\n      this.createOrResumeAudioContext();\n\n      // Generate necessary payload\n      const payload = {\n        \"audioConfig\": {\n          \"audioEncoding\": \"MP3\",\n          \"speakingRate\": this.speed,\n          \"pitch\": this.pitch\n        },\n        \"input\": {\n          \"text\": text\n        },\n        \"voice\": {\n          \"languageCode\": this.lang === \"pt-BR\" ? \"pt-PT\" : this.lang,  // Replace pt-BR with pt-PT for MALE voice\n          \"ssmlGender\": getVoiceGender(name || this.voice)\n        }\n      };\n\n      // Send request to Google TTS API\n      const ax = axios.create({\n        baseURL: \"https://texttospeech.googleapis.com/v1\",\n        method: \"post\",\n        params: {\n          \"key\": conf.googleTTSApi.key\n        }\n      });\n\n      ax.post(\"/text:synthesize\", payload).then((data) => {\n\n        // Play the MP3 file that TTS returned\n        const audioConfig = new AudioContextConfig(volume);\n        speak(data.data.audioContent, delay, audioConfig);\n      }).catch((e) => {\n        console.error(e);\n        reject(e);\n      });\n\n      /**\n       * Play an ArrayBufferLike file with custom configuration\n       * @param data: ArrayBuffer\n       * @param delay: Seconds of delay if another audio context is playing\n       * @param config: AudioContextConfig\n       * @return null\n       * */\n      const speak = (data, delay, config) => {\n        // Initialize the AudioContext\n        this.createOrResumeAudioContext();\n\n        // Convert base64 data to ArrayBuffer\n        const audioData = this.base64ToArrayBuffer(data);\n\n        // Config AudioContext engine\n        this.audioContext.decodeAudioData(audioData, (audioBuffer) => {\n          const source = this.audioContext.createBufferSource();\n          source.buffer = audioBuffer;\n          source.loop = config.loop;\n          source.loopStart = 0;\n          source.playbackRate.value = config.playbackRate;\n          source.loopEnd = audioBuffer.duration;\n          source.connect(this.audioContext.destination);\n          source.start = source.start || source.noteOn;\n          source.stop = source.stop || source.noteOff;\n\n          // Delay audio when another track is playing\n          source.onended = (e) => {\n            source.onended = null;\n            source.stop(0);\n            setTimeout(() => {\n              resolve();\n            }, delay);\n          };\n\n          // Start playing audio\n          source.start(0);\n          setTimeout(() => {\n            source.stop(0);\n            resolve();\n          }, 10000);\n\n        }, (e) => {\n          console.error(e);\n          reject(e);\n        });\n      };\n    });\n\n  }\n\n  /**\n   * Convert base64-encoded mp3 to arrayBuffer\n   * @param base64: base64-encoded file\n   * @return ArrayBuffer\n   * */\n  base64ToArrayBuffer(base64) {\n    const binary_string = window.atob(base64);\n    const len = binary_string.length;\n    let bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  /**\n   * Lazy initialization of AudioContext\n   * */\n  createOrResumeAudioContext() {\n    if (!this.audioContext || this.audioContext.status === \"close\") {\n      this.audioContext = new AudioContext();\n    } else if (this.audioContext.state === \"suspended\") {\n      this.audioContext.resume().then();\n    }\n  }\n\n\n\n  async stop() {\n    if (this.audioContext) {\n      await this.audioContext.suspend();\n    }\n  }\n}\n\nconst getVoiceGender = (voice) => {\n  const MALE = \"MALE\";\n  const FEMALE = \"FEMALE\";\n\n  const voiceGenderDict = {\n    \"nozomi\": FEMALE,\n    \"sumire\": FEMALE,\n    \"maki\": FEMALE,\n    \"kaho\": FEMALE,\n    \"akari\": FEMALE,\n    \"nanako\": FEMALE,\n    \"reina\": FEMALE,\n    \"seiji\": MALE,\n    \"hiroshi\": MALE,\n    \"osamu\": MALE,\n    \"taichi\": MALE,\n    \"koutarou\": MALE,\n    \"anzu\": MALE,\n    \"yuuto\": FEMALE,\n    \"chihiro\": FEMALE,\n    \"nozomi_emo\": FEMALE,\n    \"maki_emo\": FEMALE,\n    \"reina_emo\": FEMALE,\n    \"taichi_emo\": MALE,\n  };\n\n  return voiceGenderDict[voice] || \"MALE\";\n};\n","import React from 'react';\nimport './App.css';\nimport config from './config';\nimport {GoogleTTS} from './speech'\n\nexport default class App extends React.Component {\n\n  handleClick = () => {\n    // window.TTS\n    // .speak('Apache cordova is a mobile application development').then(function () {\n    //     alert('success');\n    // }, function (reason) {\n    //     alert(reason);\n    // });\n    // window.TTS\n    // .speak({\n    //     text: 'Hôm nay là chủ nhật',\n    //     locale: 'vi',\n    //     rate: 1.5\n    // }).then(function () {\n    //     alert('success');\n    // }, function (reason) {\n    //     alert(reason);\n    // });\n    const { voice, speed, pitch, range } = config.speechSynthesis['vi-VN'][\"character\"][\"male\"];\n    let speechSynthesis = {};\n    speechSynthesis = new GoogleTTS(\"vi-VN\", voice, speed, pitch, range);\n    speechSynthesis.start('con chó con con chó mẹ', 100)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Ma Sói One Night</h1>\n          <a className=\"App-Play\" href=\"#\" onClick={this.handleClick}>\n            Play\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}